//RESIDENTIAL BUILDING: 1 column, two elevators, 10 floors
----------------------------------------------------------
SEQUENCE initialize
   IF battery_status = low: TRUE THEN
       DISPLAY red flashing light
       ALERT "Change battery"
   
   ELSE

        FOR EACH callButton
           SET callButton = {
           direction (goingUP, goingDOWN)
           floor
           light:off
        }
  
        FOR EACH column IN building
            SET column = {
            arrayOfElevators(id #):
        }
 
 
        FOR EACH elevator IN column
            SET elevator = {
            timeOfDay
            state: stopped (other parameter: moving)
            status: idle (other parameters: occupied)
            available:true
            currentFloor: 1
            floorButtons: {
                light
                requestedFloor
            }
            requestList = empty (an ARRAY)
            waitList = empty
            doorStatus: closed
            }

        FOR EACH shaft IN column
            SET shaft = {
                doorStatus: closed
                currentFloor
                shaftID # = elevatorID #
            }
        END IF
END SEQUENCE

-----------------------------------------BUTTONS----------------------------------
 
' Someone presses call button'
SEQUENCE callButton pressed USING column, direction, floor
   GET direction and floor from callButton
   DISPLAY callButton.light:ON
   CALL find_elevator
   ADD (direction and floor of callButton) to elevator.requestList  
END SEQUENCE '//NOTE: floor AND requested floor all go to the same


'Someone presses request floor button (inside elevator)'
SEQUENCE FOR EACH request_button pressed
   GET requestedFloor
   DISPLAY floorButton = light:ON
   IF   elevator.status is idle THEN
        SET elevator.status to occupied
        SET elevator.state to moving
        COMPUTE elevator.direction USING elevator.currentFloor AND first item on elevator.requestList
        ADD/PUSH requestedFloor to the end of elevator.requestList
        
   ELSE IF
        elevator.direction is = UP AND requestedFloor < elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        (DO NOT SORT REQUEST LIST)

   ELSE IF 
        elevator.direction is = UP AND requestedFloor > elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        CALL sort_requestList
   ELSE IF
        elevator.direction is = DOWN AND requestedFloor > elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        (DO NOT SORT REQUEST LIST)
   ELSE 
        elevator.direction is = DOWN AND requestedFloor < elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        CALL sort_requestList
END FOR
END SEQUENCE
 ----------------------------------------elevator------------------------------------------

' Find elevator'
SEQUENCE find_elevator USING elevator
   FOR EACH available elevators
       COMPUTE elevatorProximity WITH elevator.currentFloor and callButton.currentFloor RETURNING elevatorProximity 
       GET elevator.state
       IF      ALL elevators are idle THEN
                '//COMPARE THE PROXIMITY
               IF   both elevators have the same elevatorProximity THEN
                    CHOOSE the elevator with smaller ID number
                    GET ID of elevator
               ELSE
                    CHOOSE the elevator with smaller elevatorProximity
                    GET ID of elevator
               END IF      
               ADD/PUSH callButton.floor DIRECTLY TO elevator.requestList '//Each elevator has their own array of requestList
               CALL move_elevator
      
       ELSE     '//IF NOT IDLE'
               COMPUTE current_direction_of_elevator USING elevator.requestList[0] - elevator.currentFloor 
               '//CHECK IF THE ELEVATORS ARE HEADING THE SAME WAY AS CALL BUTTON (if idle = heading same way)//'
               IF   current_direction_of_elevator = positive and callButton.direction UP THEN
                    COMPUTE on_the_way USING elevator.currentFloor and callButton.currentFloor
                    IF  elevator.currentFloor < callButton.currentFloor THEN
                        RETURNING TRUE
                    ELSE
                        RETURN FALSE
                    END IF

               ELSE IF current_direction_of_elevator = negative and callButton.direction DOWN THEN
                    COMPUTE on_the_way USING elevator.currentFloor and callButton.currentFloor
                    IF elevator.currentFloor < callButton.currentFloor THEN
                        RETURNING TRUE
                    ELSE
                        RETURN FALSE
                    END IF

               ELSE IF current_direction_of_elevator = positive and callButton.direction DOWN THEN
                    SET on_the_way = FALSE
                
               ELSE IF current_direction_of_elevator = negative and callButton.direction UP THEN
                    SET on_the_way = FALSE
               
               ELSE IF current_direction_of_elevator != negative || current_direction_of_elevator != positive THEN
                    SET on_the_way = TRUE
               END IF
               
              '//FIND MOST CONVENIENT ELEVATOR, GET ID AND ADD CALL BUTTON TO ITS REQUESTLIST'
               IF ALL elevators that are on_the_way = TRUE THEN
                   FOR EACH elevator that is on_the_way = TRUE
                   COMPARE elevatorProximity of each elevator
                   IF there is 1 elevator with the smallest elevatorProximity THEN
                        GET ID of elevator
                        ADD callButton.floor to this elevator.waitList
                        CALL sort_requestList
                        CALL move_elevator
                   ELSE 2 or more elevatorProximity is the smallest THEN
                        IF there is an elevator with the shortest elevator.requestList THEN
                            GET ID of elevator
                            ADD callButton.floor to this elevator.waitList
                            CALL sort_requestList
                            CALL move_elevator
                        ELSE 
                            GET ID of elevator
                            CHOOSE an elevator with the smallest ID number THEN 
                            ADD callButton.floor to this elevator.waitList
                            CALL sort_requestList
                            CALL move_elevator
                        END IF
                    END IF

               ELSE IF there are elevators that are on_the_way = TRUE && elevators are on_the_way = FALSE THEN
                       FOR EACH elevator that is on_the_way = FALSE
                       COMPUTE travel_time USING elevator.requestList.length-1 AND elevator.currentFloor AND callButton 
                               RETURNING travel_time_with_elevatorProximity
                       IF (elevatorProximity of elevator is on_the_way = TRUE) < (travel_time_with_elevatorProximity of elevator is on_the_way = FALSE)
                            GET ID of (elevator is on_the_way = TRUE)
                            ADD callButton.floor to this elevator.waitList
                            CALL sort_requestList
                            CALL move_elevator
                       ELSE
                            GET ID of of elevator is on_the_way = FALSE
                            ADD callButton.floor to this elevator.waitList
                            CALL sort_requestList
                            CALL move_elevator
                       END IF
               END IF
       END IF
END SEQUENCE

-------------------------------------------Sort RequestList------------------------------------
 
' sort_requestList '
SEQUENCE sort_requestList USING elevator.requestList AND elevator.waitList
        GET elevatorID
        GET elevator.requestList
        GET elevator.waitList '/where call button's floor is stored'
        COMPUTE current_direction_of_elevator USING elevator.waitList - elevator.currentFloor
                IF      it returns a positive number THEN
                        RETURN UP
                ELSE IF 
                        it returns a negative number THEN
                        RETURN DOWN
                ELSE 
                        RETURN NOT MOVING
                END IF

        IF      (current_direction_of_elevator = UP) && (elevator.waitList > elevator.currentFloor) THEN 
                USE INSERT SORT ALGORITHM to INSERT the value of elevator.waitList into the elevator.requestList in ASCENDING ORDER

        ELSE IF 
                (current_direction_of_elevator = DOWN) && (elevator.waitList < elevator.currentFloor) THEN
                USE INSERT SORT ALGORITHM to INSERT the value of elevator.waitList into the elevator.requestList in DESCENDING ORDER
       
        ELSE IF 
                (current_direction_of_elevator = UP) && (elevator.waitList < elevator.currentFloor) THEN 
                INSERT elevator.waitList as the last item on the elevator.requestList 
        ELSE IF
                (current_direction_of_elevator = DOWN) && (elevator.waitList > elevator.currentFloor) THEN 
                INSERT elevator.waitList as the last item on the elevator.requestList 
        ELSE
                (current_direction_of_elevator = NOT MOVING) THEN
                INSERT elevator.waitList in the elevator.requestList 
        END IF
END SEQUENCE

---------------------------------------------Move Elevator------------------------------------
 
'Elevator moves to destinated floor'
SEQUENCE move_elevator
        GET elevator ID   
        GET elevator.requestList
        GET elevator.currentFloor

        IF elevator.currentFloor < first item on elevator.requestList THEN
            SET elevator.state = moving
            SET elevator.status = occupied
            WHILE elevator.currentFloor < first item on elevator.requestList 
                INCREMENT elevator.currentFloor by 1
            END WHILE
            CALL open_elevator_door
            '/TURN OFF CALL BUTTON LIGHT'
            DETERMINE callButton.currentFloor = elevator.currentFloor is TRUE
                IF TRUE THEN
                    GET direction of callButton
                    IF callButton.direction = UP THEN
                    DISPLAY callButton.light = OFF 
                    ELSE 
                        DO nothing
                    END IF
                ELSE
                    DO nothing
                END IF
            POP/REMOVE first item on elevator.requestList
            floorButtons = light: OFF
            SET elevator.state = stopped
            WHEN elevator.doorStatus = opened 
                SET timer TO 30 seconds
                IF  elevator.doorStatus is opened > 30 seconds THEN
                    WHILE elevator.doorStatus = opened 
                        ALERT "BEEP"
                    END WHILE
                ELSE 
                    Do nothing
                END IF

        ELSE IF elevator.currentFloor > first item on elevator.requestList THEN
            SET elevator.state = moving
            SET elevator.status = occupied
            WHILE elevator.currentFloor > first item on elevator.requestList 
                DECREMENT elevator.currentFloor by 1
            END WHILE    
            CALL open_elevator_door
            '/TURN OFF CALL BUTTON LIGHT'
            DETERMINE callButton.currentFloor = elevator.currentFloor is TRUE
                IF TRUE THEN
                    GET direction of callButton
                    IF callButton.direction = DOWN THEN
                    DISPLAY callButton.light = OFF 
                    ELSE 
                        DO nothing
                    END IF
                ELSE
                    DO nothing
                END IF
            POP/REMOVE first item on elevator.requestList
            SET elevator.state = stopped
            WHEN elevator.doorStatus = opened 
                SET timer TO 30 seconds
                IF  elevator.doorStatus is opened > 30 seconds THEN
                    WHILE elevator.doorStatus = opened 
                        ALERT "BEEP"
                    END WHILE
                ELSE 
                    Do nothing
                END IF

        ELSE IF elevator.currentFloor = first item on elevator.List THEN
            CALL open_elevator_door
            SET elevator.state = stopped
            SET elevator.status = occupied
            POP/REMOVE first item on elevator.requestList
            '/TURN OFF CALL BUTTON LIGHT'
            DETERMINE callButton.currentFloor = elevator.currentFloor is TRUE
                IF TRUE THEN
                    DISPLAY callButton.light = OFF 
                    ELSE 
                        DO nothing
                    END IF
                ELSE
                    DO nothing
                END IF
            WHEN elevator.doorStatus = opened 
                SET timer TO 30 seconds
                IF  elevator.doorStatus is opened > 30 seconds THEN
                    WHILE elevator.doorStatus = opened 
                        ALERT "BEEP"
                    END WHILE
                ELSE 
                    Do nothing
                END IF
    END IF
END SEQUENCE

------------------------------------------------door------------------------------------
SEQUENCE open_elevator_door
    GET shaftID and shaft.currentFoor WITH elevatorID and elevator.currentFloor
    SET shaft.doorStatus = opened
    SET elevator.doorStatus = opened
    SET elevator.state = stopped
    CALL close_elevator_door
    END WHILE
END SEQUENCE
 
' Close door'
SEQUENCE close_elevator_door
    GET shaftID and shaft.currentFoor WITH elevatorID and elevator.currentFloor
    SET WAIT 7 seconds
    IF door is not clear THEN
        CALL open_elevator_door
    ELSE
        Slowly close elevator door
        SET shaft.doorStatus = closed
        SET elevator.doorStatus = closed
        IF  requestList = empty THEN
            SET elevator.status = idle
            SET elevator.state = stopped
        ELSE   
            move_elevator
            SET elevator.status = occupied
            SET elevator.state = moving
        END IF
    END IF
SEQUENCE

-----------------------------------------Weight Listener--------------------------------------
' Detect weight'
SEQUENCE detect_weight_listener
    WHILE weight in elevator > 700 kg
        SET elevator.available to FALSE
    END WHILE
END SEQUENCE
 
 -----------------------------------------Time Listener -----------------------------------

' Detect time'
SEQUENCE time_listener
    '/EVENING RUSH HOUR'
    WHILE time is 6:30am-9am
        FOR EACH elevator.status = idle 
            ADD floor 10 to elevator.requestList
            CALL move_elevator
    END WHILE
    '/MORNING RUSH HOUR'
    WHILE time is 3pm-7pm
        FOR EACH elevator.status = idle
            ADD floor 1 to elevator.requestList
            CALL move_elevator
        END WHILE
END SEQUENCE
