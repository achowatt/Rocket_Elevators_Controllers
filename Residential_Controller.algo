//RESIDENTIAL BUILDING: 1 column, two elevators, 10 floors
----------------------------------------------------------
SEQUENCE initialize
   IF battery_status = low: TRUE THEN
       DISPLAY red flashing light
       ALERT "Change battery"
   ELSE

        FOR EACH callButton
            SET callButton = {
           direction
           currentFloor
           light:off
        }
  
        FOR EACH column IN building
        SET column = {
            arrayOfElevators(id #):
        }
 
 
        FOR EACH elevator IN column
        SET elevator = {
        state: stopped (other parameters: moving)
        status: idle (other parameters: occupied)
        available:true
        currentFloor: 1
        floorButtons: {
           light
           requestedFloor
        }
        requestList = empty
        doorStatus: closed
        }

        FOR EACH shaft IN column
        SET shaft = {
            doorStatus: closed
            currentFloor
            shaftID # = elevatorID #
        }
    END IF
END SEQUENCE

---------------------------------------------------------------BUTTONS-----------------------------------------------------------
 
' Someone presses call button'
SEQUENCE callButton pressed USING column, direction, floor
   GET direction and floor from callButton
   DISPLAY light:ON
   CALL find_elevator
   ADD (direction and floor of callButton) to elevator.requestList
END SEQUENCE


'Someone presses request floor button (inside elevator)'
SEQUENCE request_button pressed
FOR EACH
   GET requestedFloor
   DISPLAY light:ON
   IF   elevator.status is idle THEN
        SET elevator.status to occupied 
        COMPUTE elevator.direction USING elevator.currentFloor AND (first item) elevator.requestList
        ADD/PUSH requestedFloor to the end of elevator.requestList
        
   ELSE IF
        elevator.direction is = UP AND requestedFloor < elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        (DO NOT SORT REQUEST LIST)

   ELSE IF 
        elevator.direction is = UP AND requestedFloor > elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        CALL sort_requestList
   ELSE IF
        elevator.direction is = DOWN AND requestedFloor > elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        (DO NOT SORT REQUEST LIST)
   ELSE 
        elevator.direction is = DOWN AND requestedFloor < elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        CALL sort_requestList
END FOR
END SEQUENCE
 -------------------------------------------------------------elevator----------------------------------------------------------------

' Find elevator'
SEQUENCE find_elevator USING elevator
   FOR EACH available elevators
       COMPUTE elevatorProximity BETWEEN elevator.currentFloor and callButton.currentFloor RETURNING elevatorProximity
       GET elevator.state
       IF      ALL elevators are idle THEN
               IF   both elevators have the same elevatorProximity THEN
                    CHOOSE the elevator with smaller ID number
               ELSE
                    CHOOSE the elevator with smaller elevatorProximity
                    GET ID of elevator
               END IF      
               ADD callButton.floor to elevator.requestList
               CALL move_elevator
      
       ELSE IF
               SOME elevator.state = idle AND elevator.state = moving THEN
               COMPUTE find_direction_of_elevator USING elevator.requestList AND elevator.currentFloor RETURNING elevator.direction of all elevators
               IF elevator.direction = callButton.direction THEN
                   COMPUTE on_the_way USING elevator.currentFloor and callButton.currentFloor RETURNING TRUE
               ELSE
                   RETURN on_the_way = FALSE
               END IF
 
               IF (elevator is on_the_way = TRUE) AND its elevatorProximity < (elevatorProximity of elevator.state = idle)
                   GET ID of elevator.state TRUE
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE IF elevator is on_the_way = TRUE AND elevatorProximity > elevatorProximity of elevator.state = idle
                   GET ID of elevator.state = idle
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE IF elevator is on_the_way = TRUE AND elevatorProximity = elevatorProximity of elevator.state = idle
                   GET ID of elevator.state = idle
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE
                   GET ID of elevator.state = idle
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               END IF
      
       ELSE
               ALL elevator.state = moving THEN
               COMPUTE find_direction_of_elevator USING elevator.requestList AND elevator.currentFloor RETURNING elevator.direction of all elevators
               IF elevator.direction = callButton.direction THEN
                   COMPUTE on_the_way USING elevator.currentFloor and callButton.currentFloor RETURNING TRUE
               ELSE
                   RETURN on_the_way = FALSE
               END IF
 
               GET ID of elevator is on_the_way = FALSE
               COMPUTE travel_time USING elevator.requestList.length-1 AND elevator.currentFloor AND callButton RETURNING travel_time_with_elevatorProximity
 
               IF elevatorProximity of elevator is on_the_way = TRUE < travel_time_with_elevatorProximity of elevator is on_the_way = FALSE
                   GET ID of (elevator is on_the_way = TRUE)
                   PUSH/ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE
                   GET ID of of elevator is on_the_way = FALSE
                   PUSH/ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               END IF
END SEQUENCE

 
' sort_requestList '
SEQUENCE sort_requestList USING elevator.requestList 
    COMPUTE find_direction_of_elevator USING 1st item on elevator.requestList AND elevator.currentFloor RETURNING elevator.direction
        IF      elevator.direction = UP THEN
                RETURN elevator.requestList in ascending order (USING insert sort from smallest to largest)
                PUSH ANYTHING less than elevator.currentFloor to last in elevator.requestList
                
        ELSE IF elevator.direction = DOWN THEN
                RETURN elevator.requestList in descending order (USING insert sort from smallest to largest)
                PUSH ANYTHING more than elevator.currentFloor to last in elevator.requestList
        ELSE
                elevator.direction = NULL THEN
                RETURN elevator.requestList = empty
        END IF
END SEQUENCE


'Elevator moves to destinated floor'
SEQUENCE move_elevator USING elevator.direction AND elevator.currentFloor AND elevator.requestList
    IF  elevator.direction = UP THEN
        GET first item on elevator.requestList
        WHILE elevator.currentFloor < first item on elevator.requestList 
            INCREMENT elevator.currentFloor by 1
        END WHILE
        POP/REMOVE first item on elevator.requestList
        CALL open_elevator_door
        SET timer TO 30 seconds
        IF  elevator.doorStatus is opened within 30 seconds THEN
            WHILE elevator.doorStatus = opened 
                  ALERT "BEEP"
            END WHILE
        ELSE 
            Do nothing
        END IF

    ELSE IF
        elevator.direction = DOWN THEN
        GET first item on elevator.requestList
        WHILE elevator.currentFloor > first item on elevator.requestList 
            DECREMENT elevator.currentFloor by 1
        END WHILE    
        POP/REMOVE first item on elevator.requestList
        CALL open_elevator_door
        SET elevator.state = stopped
        SET timer TO 30 seconds
         IF  elevator.doorStatus is opened within 30 seconds THEN
            WHILE elevator.doorStatus = opened 
                  ALERT "BEEP"
            END WHILE
        ELSE 
            Do nothing
        END IF
        
    ELSE elevator.status = idle THEN
        IF callbutton.currentFloor > elevator.currentFloor THEN
            SET elevator.direction = UP
            SET elevator.state = moving
            SET elevator.status = occupied
            GET first item on elevator.requestList
            WHILE elevator.currentFloor < first item on elevator.requestList 
                INCREMENT elevator.currentFloor by 1
            END WHILE
            POP/REMOVE first item on elevator.requestList
            CALL open_elevator_door
            SET timer TO 30 seconds
            IF  elevator.doorStatus is opened within 30 seconds THEN
                 WHILE  elevator.doorStatus = opened 
                        ALERT "BEEP"
                END WHILE
            ELSE 
                Do nothing
        END IF

        ELSE
            callbutton.currentFloor < elevator.currentFloor THEN
            SET elevator.direction = DOWN
            SET elevator.state = moving
            SET elevator.status = occupied
            GET first item on elevator.requestList
            WHILE elevator.currentFloor < first item on elevator.requestList 
                INCREMENT elevator.currentFloor by 1
            END WHILE
            POP/REMOVE first item on elevator.requestList
            CALL open_elevator_door
            SET timer TO 30 seconds
            IF  elevator.doorStatus is opened within 30 seconds THEN
                 WHILE  elevator.doorStatus = opened 
                        ALERT "BEEP"
                END WHILE
            ELSE 
                Do nothing
        END IF

    END IF
END SEQUENCE

---------------------------------------------------------------door--------------------------------------------------------------         
' Open door'                                          
SEQUENCE open_elevator_door
    GET shaftID and shaft.currentFoor WITH elevatorID and elevator.currentFloor
    SET shaft.doorStatus = opened
    SET elevator.doorStatus = opened
    CALL close_elevator_door
    END WHILE
END SEQUENCE
 
' Close door'
SEQUENCE close_elevator_door
    GET shaftID and shaft.currentFoor WITH elevatorID and elevator.currentFloor
    SET shaft.doorStatus = closed
    SET elevator.doorStatus = closed
    SET 7 seconds timer
    IF door is not clear THEN
        CALL open_elevator_door
    ELSE
        Slowly close elevator door
        SET elevator.doorStatus = closed
        IF  requestList = empty THEN
            SET elevator.status = idle
        ELSE   
            move_elevator
        END IF
    END IF
SEQUENCE

---------------------------------------------------------------weight--------------------------------------------------------------  
' Detect weight'
SEQUENCE detect_weight_listener
    WHILE weight in elevator > 700 kg
        SET elevator.available to FALSE
    END WHILE
END SEQUENCE
 


