//RESIDENTIAL BUILDING: 1 column, two elevators, 10 floors
----------------------------------------------------------
SEQUENCE initialize
   CALL check_battery_power
   IF battery_status = low: TRUE THEN
       DISPLAY red flashing light
       ALERT "Turn off battery"
   ELSE
       CALL intialize_elevator_status
   END IF
 
   FOR EACH callButton IN
       SET callButton = {
           direction
           currentFloor
           light:off
       }
  
   FOR EACH column IN building
   SET column = {
       arrayOfElevators(id #):
   }
 
 
   FOR EACH elevators IN column
   SET elevator = {
       state: stopped (other parameters: moving)
       status: idle (other parameters: called)
       available:true
       currentFloor: 1
       floorButtons: {
           light
           requestedFloor
       }
       requestList = empty
       doorStatus: closed
   }
 
END SEQUENCE

---------------------------------------------------------------BUTTONS-----------------------------------------------------------
 
' Someone presses call button'
SEQUENCE callButton pressed USING column, direction, floor
   GET direction and floor from callButton
   DISPLAY light:ON
   ADD direction and floor to floorWaitList
   CALL find_elevator
END SEQUENCE


'Someone presses request floor button'
SEQUENCE request_button pressed
   GET requestedFloor
   DISPLAY light:ON
   IF   elevator.direction is = UP AND requestedFloor < elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        DO NOT SORT REQUEST LIST

   ELSE IF 
        elevator.direction is = UP AND requestedFloor > elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        CALL sort_requestList
   ELSE IF
        elevator.direction is = DOWN AND requestedFloor > elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        DO NOT SORT REQUEST LIST
   ELSE 
        elevator.direction is = DOWN AND requestedFloor < elevator.currentFloor THEN
        ADD/PUSH requestedFloor to the end of elevator.requestList
        CALL sort_requestList
END SEQUENCE
 -------------------------------------------------------------elevator----------------------------------------------------------------

' Find elevator'
SEQUENCE find_elevator USING elevator
   GET ID of elevators that are available
   FOR EACH available elevators
       COMPUTE calc_elevatorProximity USING elevator.currentFloor and callButton.currentFloor RETURNING elevatorProximity
       GET elevator.state
       IF      ALL elevators are idle THEN
               GET ID of elevator with the smallest elevatorProximity
               ADD callButton.floor to elevator.requestList
               CALL sort_requestList
               CALL move_elevator
      
       ELSE IF
               SOME elevator.state = idle AND elevator.state = moving THEN
               COMPUTE find_direction_of_elevator USING elevator.requestList AND elevator.currentFloor RETURNING elevator.direction of all elevators
               IF elevator.direction = callButton.direction THEN
                   COMPUTE on_the_way USING elevator.currentFloor and callButton.currentFloor RETURNING TRUE
               ELSE
                   RETURN on_the_way = FALSE
               END IF
 
               IF elevator is on_the_way = TRUE AND elevatorProximity < elevatorProximity of elevator.state = idle
                   GET ID of elevator.state TRUE
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE IF elevator is on_the_way = TRUE AND elevatorProximity > elevatorProximity of elevator.state = idle
                   GET ID of elevator.state = idle
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE IF elevator is on_the_way = TRUE AND elevatorProximity = elevatorProximity of elevator.state = idle
                   GET ID of elevator.state = idle
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE
                   GET ID of elevator.state = idle
                   ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               END IF
      
       ELSE
               ALL elevator.state = moving THEN
               COMPUTE find_direction_of_elevator USING elevator.requestList AND elevator.currentFloor RETURNING elevator.direction of all elevators
               IF elevator.direction = callButton.direction THEN
                   COMPUTE on_the_way USING elevator.currentFloor and callButton.currentFloor RETURNING TRUE
               ELSE
                   RETURN on_the_way = FALSE
               END IF
 
               GET ID of elevator is on_the_way = FALSE
               COMPUTE travel_time USING elevator.requestList.length-1 AND elevator.currentFloor AND callButton RETURNING travel_time_with_elevatorProximity
 
               IF elevatorProximity of elevator is on_the_way = TRUE < travel_time_with_elevatorProximity of elevator is on_the_way = FALSE
                   GET ID of of elevator is on_the_way = TRUE
                   PUSH/ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               ELSE
                   GET ID of of elevator is on_the_way = FALSE
                   PUSH/ADD callButton.floor to this elevator.requestList
                   CALL sort_requestList
                   CALL move_elevator
               END IF
END SEQUENCE

 
' sort_requestList '
SEQUENCE sort_requestList USING elevator.requestList 
    COMPUTE find_direction_of_elevator USING 1st item on elevator.requestList AND elevator.currentFloor RETURNING elevator.direction
        IF      elevator.direction = UP THEN
                RETURN elevator.requestList in descending order (from smallest to largest)
                PUSH ANYTHING less than elevator.currentFloor to last in elevator.requestList
                
        ELSE IF elevator.direction = DOWN THEN
                RETURN elevator.requestList in descending order (from smallest to largest)
                PUSH ANYTHING more than elevator.currentFloor to last in elevator.requestList
        ELSE
                elevator.direction = NULL THEN
                RETURN elevator.requestList = empty
        END IF
END SEQUENCE


' Elevator moves to destinated floor'
SEQUENCE move_elevator USING elevator.direction AND elevator.currentFloor AND elevator.requestList
    IF  elevator.direction = UP THEN
        GET first item on elevator.requestList
        WHILE elevator.currentFloor < first item on elevator.requestList 
            INCREMENT elevator.currentFloor by 1
        END WHILE
        CHECK elevator.currentFloor = first item on elevator.requestList is TRUE
            IF  TRUE THEN 
                POP/REMOVE first item on elevator.requestList
                CALL open_elevator_door
            ELSE 
                WHILE elevator.currentFloor < first item on elevator.requestList 
                INCREMENT elevator.currentFloor by 1
                END WHILE
            END IF

    ELSE
        elevator.direction = DOWN THEN
        GET first item on elevator.requestList
        WHILE elevator.currentFloor > first item on elevator.requestList 
            DECREMENT elevator.currentFloor by 1
        END WHILE
        CHECK elevator.currentFloor = first item on elevator.requestList is TRUE
            IF  TRUE THEN 
                POP/REMOVE first item on elevator.requestList
                CALL open_elevator_door
            ELSE 
                WHILE elevator.currentFloor > first item on elevator.requestList 
                DECREMENT elevator.currentFloor by 1
                END WHILE
            END IF
    END IF
END SEQUENCE

---------------------------------------------------------------door--------------------------------------------------------------         
' Open door'
SEQUENCE open_elevator_door
    CHANGE elevator.doorStatus = opened
    WAIT 7 SECONDS
    IF  door is clear THEN
        CALL close_elevator_door
    ELSE 
        CALL open_elevator_door
    END IF

    WHILE door is not clear after 30 SECONDS
    Alert "BEEEP"
    END WHILE
END SEQUENCE
 
' Close door'
SEQUENCE close_elevator_door
    slowly close elevator door
    CHANGE elevator.doorStatus = opened
    CALL sort_requestList
    IF   sort_requestList RETURNS elevator.requestList = no request THEN
         SET elevator.state = IDLE
    ELSE
         move_elevator
    END IF
SEQUENCE

---------------------------------------------------------------weight--------------------------------------------------------------  
' Detect weight'
SEQUENCE detect_weight_listener
    WHILE weight in elevator > 500 kg 
        SET elevator.available to FALSE
    END WHILE
END SEQUENCE
